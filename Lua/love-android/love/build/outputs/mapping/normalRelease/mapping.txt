# compiler: R8
# compiler_version: 8.0.35
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"2.1"}
# pg_map_id: 0189274
# pg_map_hash: SHA-256 0189274203572c2b40fc415a15cbc55519d7daaa30114c6ae7b058e8b9399419
org.libsdl.app.HIDDevice -> org.libsdl.app.a:
    void setFrozen(boolean) -> a
    void shutdown() -> a
    int getId() -> b
    boolean open() -> c
    android.hardware.usb.UsbDevice getDevice() -> d
org.libsdl.app.HIDDeviceBLESteamController -> org.libsdl.app.b:
    byte[] enterValveMode -> p
    boolean mFrozen -> i
    android.bluetooth.BluetoothDevice mDevice -> b
    java.util.LinkedList mOperations -> j
    org.libsdl.app.HIDDeviceManager mManager -> a
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation mCurrentOperation -> k
    int mDeviceId -> c
    boolean mIsRegistered -> e
    boolean mIsConnected -> f
    boolean mIsChromebook -> g
    boolean mIsReconnecting -> h
    android.os.Handler mHandler -> l
    android.bluetooth.BluetoothGatt mGatt -> d
    java.util.UUID reportCharacteristic -> o
    java.util.UUID inputCharacteristic -> n
    java.util.UUID steamControllerService -> m
    1:1:java.util.LinkedList access$000(org.libsdl.app.HIDDeviceBLESteamController):0:0 -> a
    2:2:void enableNotification(java.util.UUID):0:0 -> a
    3:3:void queueGattOperation(org.libsdl.app.HIDDeviceBLESteamController$GattOperation):0:0 -> a
    4:4:void setFrozen(boolean):0:0 -> a
    5:5:void shutdown():0:0 -> a
    1:1:android.bluetooth.BluetoothGatt access$100(org.libsdl.app.HIDDeviceBLESteamController):0:0 -> b
    2:2:android.bluetooth.BluetoothGatt connectGatt(boolean):0:0 -> b
    3:3:int getId():0:0 -> b
    1:1:boolean open():0:0 -> c
    2:2:boolean probeService(org.libsdl.app.HIDDeviceBLESteamController):0:0 -> c
    android.hardware.usb.UsbDevice getDevice() -> d
    void close() -> e
    android.bluetooth.BluetoothGatt connectGatt() -> f
    void executeNextGattOperation() -> g
    void finishCurrentGattOperation() -> h
    int getConnectionState() -> i
    java.lang.String getIdentifier() -> j
    java.lang.String getManufacturerName() -> k
    int getProductId() -> l
    java.lang.String getProductName() -> m
    java.lang.String getSerialNumber() -> n
    int getVendorId() -> o
    int getVersion() -> p
    boolean isRegistered() -> q
    void reconnect() -> r
    void setRegistered() -> s
org.libsdl.app.HIDDeviceBLESteamController$2 -> org.libsdl.app.b$a:
    org.libsdl.app.HIDDeviceBLESteamController this$0 -> a
org.libsdl.app.HIDDeviceBLESteamController$3 -> org.libsdl.app.b$b:
    org.libsdl.app.HIDDeviceBLESteamController this$0 -> a
org.libsdl.app.HIDDeviceBLESteamController$4 -> org.libsdl.app.b$c:
    int[] $SwitchMap$org$libsdl$app$HIDDeviceBLESteamController$GattOperation$Operation -> a
org.libsdl.app.HIDDeviceBLESteamController$GattOperation -> org.libsdl.app.b$d:
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation mOp -> a
    boolean mResult -> e
    java.util.UUID mUuid -> b
    android.bluetooth.BluetoothGatt mGatt -> d
    byte[] mValue -> c
    1:1:org.libsdl.app.HIDDeviceBLESteamController$GattOperation enableNotification(android.bluetooth.BluetoothGatt,java.util.UUID):0:0 -> a
    2:2:boolean finish():0:0 -> a
    3:3:android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID):0:0 -> a
    void run() -> b
org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation -> org.libsdl.app.b$d$a:
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation CHR_WRITE -> b
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation CHR_READ -> a
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation ENABLE_NOTIFICATION -> c
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation[] $VALUES -> d
    org.libsdl.app.HIDDeviceBLESteamController$GattOperation$Operation[] $values() -> a
org.libsdl.app.HIDDeviceManager -> org.libsdl.app.HIDDeviceManager:
    android.content.Context mContext -> a
    android.content.SharedPreferences mSharedPreferences -> e
    android.content.BroadcastReceiver mBluetoothBroadcast -> i
    android.hardware.usb.UsbManager mUsbManager -> g
    android.content.BroadcastReceiver mUsbBroadcast -> h
    int sManagerRefCount -> k
    java.util.HashMap mDevicesById -> b
    boolean mIsChromebook -> f
    int mNextDeviceId -> d
    org.libsdl.app.HIDDeviceManager sManager -> j
    java.util.HashMap mBluetoothDevices -> c
    1:1:void access$000(org.libsdl.app.HIDDeviceManager,android.hardware.usb.UsbDevice):0:0 -> a
    2:2:void access$200(org.libsdl.app.HIDDeviceManager,android.hardware.usb.UsbDevice,boolean):0:0 -> a
    3:3:org.libsdl.app.HIDDeviceManager acquire(android.content.Context):0:0 -> a
    4:4:void close():0:0 -> a
    5:5:boolean connectBluetoothDevice(android.bluetooth.BluetoothDevice):0:0 -> a
    6:6:void connectHIDDeviceUSB(android.hardware.usb.UsbDevice):0:0 -> a
    7:7:int getDeviceIDForIdentifier(java.lang.String):0:0 -> a
    8:8:void handleUsbDevicePermission(android.hardware.usb.UsbDevice,boolean):0:0 -> a
    9:9:boolean isHIDDeviceInterface(android.hardware.usb.UsbDevice,android.hardware.usb.UsbInterface):0:0 -> a
    10:10:void release(org.libsdl.app.HIDDeviceManager):0:0 -> a
    11:11:void setFrozen(boolean):0:0 -> a
    1:1:void access$100(org.libsdl.app.HIDDeviceManager,android.hardware.usb.UsbDevice):0:0 -> b
    2:2:void disconnectBluetoothDevice(android.bluetooth.BluetoothDevice):0:0 -> b
    3:3:android.content.Context getContext():0:0 -> b
    4:4:void handleUsbDeviceAttached(android.hardware.usb.UsbDevice):0:0 -> b
    5:5:boolean isXbox360Controller(android.hardware.usb.UsbDevice,android.hardware.usb.UsbInterface):0:0 -> b
    1:1:android.hardware.usb.UsbManager getUSBManager():0:0 -> c
    2:2:void handleUsbDeviceDetached(android.hardware.usb.UsbDevice):0:0 -> c
    3:3:boolean isSteamController(android.bluetooth.BluetoothDevice):0:0 -> c
    4:4:boolean isXboxOneController(android.hardware.usb.UsbDevice,android.hardware.usb.UsbInterface):0:0 -> c
    void shutdownBluetooth() -> d
    void shutdownUSB() -> e
org.libsdl.app.HIDDeviceManager$1 -> org.libsdl.app.HIDDeviceManager$a:
    org.libsdl.app.HIDDeviceManager this$0 -> a
org.libsdl.app.HIDDeviceManager$2 -> org.libsdl.app.HIDDeviceManager$b:
    org.libsdl.app.HIDDeviceManager this$0 -> a
org.libsdl.app.HIDDeviceUSB -> org.libsdl.app.c:
    android.hardware.usb.UsbDevice mDevice -> b
    android.hardware.usb.UsbDeviceConnection mConnection -> f
    boolean mRunning -> j
    boolean mFrozen -> k
    org.libsdl.app.HIDDeviceManager mManager -> a
    int mInterface -> d
    int mDeviceId -> e
    android.hardware.usb.UsbEndpoint mOutputEndpoint -> h
    org.libsdl.app.HIDDeviceUSB$InputThread mInputThread -> i
    int mInterfaceIndex -> c
    android.hardware.usb.UsbEndpoint mInputEndpoint -> g
    1:1:void setFrozen(boolean):0:0 -> a
    2:2:void shutdown():0:0 -> a
    int getId() -> b
    boolean open() -> c
    android.hardware.usb.UsbDevice getDevice() -> d
    void close() -> e
    java.lang.String getDeviceName() -> f
    java.lang.String getIdentifier() -> g
    java.lang.String getManufacturerName() -> h
    int getProductId() -> i
    java.lang.String getProductName() -> j
    java.lang.String getSerialNumber() -> k
    int getVendorId() -> l
    int getVersion() -> m
org.libsdl.app.HIDDeviceUSB$InputThread -> org.libsdl.app.c$a:
    org.libsdl.app.HIDDeviceUSB this$0 -> a
org.libsdl.app.SDL -> a.a:
    android.content.Context mContext -> a
    1:1:android.content.Context getContext():0:0 -> a
    2:2:void loadLibrary(java.lang.String):0:0 -> a
    3:3:void setContext(android.content.Context):0:0 -> a
    void initialize() -> b
    void setupJNI() -> c
org.libsdl.app.SDLActivity -> org.libsdl.app.SDLActivity:
    java.lang.Thread mSDLThread -> t
    boolean mExitCalledFromJava -> j
    boolean mBrokenLibraries -> k
    int mCurrentOrientation -> f
    boolean mFullscreenModeActive -> u
    org.libsdl.app.SDLClipboardHandler mClipboardHandler -> o
    java.util.Hashtable mCursors -> p
    org.libsdl.app.SDLGenericMotionListener_API12 mMotionListener -> r
    org.libsdl.app.SDLActivity$NativeState mNextNativeState -> h
    org.libsdl.app.SDLActivity$NativeState mCurrentNativeState -> i
    org.libsdl.app.SDLSurface mSurface -> m
    org.libsdl.app.SDLActivity mSingleton -> l
    java.lang.Runnable rehideSystemUi -> b
    org.libsdl.app.HIDDeviceManager mHIDDeviceManager -> s
    android.os.Handler commandHandler -> a
    boolean mHasMultiWindow -> e
    android.view.ViewGroup mLayout -> n
    boolean mIsResumedCalled -> c
    boolean mHasFocus -> d
    java.util.Locale mCurrentLocale -> g
    int mLastCursorID -> q
    1:1:void appQuitFinish():0:0 -> a
    2:2:org.libsdl.app.SDLSurface createSDLSurface(android.content.Context):0:0 -> a
    3:3:boolean handleKeyEvent(android.view.View,int,android.view.KeyEvent,android.view.inputmethod.InputConnection):0:0 -> a
    4:4:boolean isTextInputEvent(android.view.KeyEvent):0:0 -> a
    5:5:int openURL(java.lang.String):0:0 -> a
    6:6:boolean sendCommand(int,java.lang.Object):0:0 -> a
    7:7:void setWindowStyle(boolean):0:0 -> a
    java.lang.String[] getArguments() -> b
    android.view.View getContentView() -> c
    android.content.Context getContext() -> d
    int getCurrentOrientation() -> e
    java.lang.String[] getLibraries() -> f
    java.lang.String getMainFunction() -> g
    java.lang.String getMainSharedObject() -> h
    org.libsdl.app.SDLGenericMotionListener_API12 getMotionListener() -> i
    void handleNativeState() -> j
    void initialize() -> k
    boolean isDeXMode() -> l
    void loadLibraries() -> m
    void pauseNativeThread() -> n
    void resetNative() -> o
    void resumeNativeThread() -> p
    void startNative() -> q
org.libsdl.app.SDLActivity$1 -> org.libsdl.app.SDLActivity$a:
    org.libsdl.app.SDLActivity this$0 -> a
org.libsdl.app.SDLActivity$NativeState -> org.libsdl.app.SDLActivity$b:
    org.libsdl.app.SDLActivity$NativeState[] $VALUES -> d
    org.libsdl.app.SDLActivity$NativeState INIT -> a
    org.libsdl.app.SDLActivity$NativeState RESUMED -> b
    org.libsdl.app.SDLActivity$NativeState PAUSED -> c
    org.libsdl.app.SDLActivity$NativeState[] $values() -> a
org.libsdl.app.SDLAudioManager -> org.libsdl.app.SDLAudioManager:
    android.media.AudioTrack mAudioTrack -> a
    android.media.AudioRecord mAudioRecord -> b
    void initialize() -> a
org.libsdl.app.SDLClipboardHandler -> org.libsdl.app.d:
    android.content.ClipboardManager mClipMgr -> a
org.libsdl.app.SDLControllerManager -> org.libsdl.app.SDLControllerManager:
    org.libsdl.app.SDLJoystickHandler mJoystickHandler -> a
    org.libsdl.app.SDLHapticHandler mHapticHandler -> b
    1:1:boolean handleJoystickMotionEvent(android.view.MotionEvent):0:0 -> a
    2:2:void initialize():0:0 -> a
    3:3:boolean isDeviceSDLJoystick(int):0:0 -> a
org.libsdl.app.SDLGenericMotionListener_API12 -> org.libsdl.app.e:
    1:1:float getEventX(android.view.MotionEvent):0:0 -> a
    2:2:boolean inRelativeMode():0:0 -> a
    1:1:float getEventY(android.view.MotionEvent):0:0 -> b
    2:2:void reclaimRelativeMouseModeIfNeeded():0:0 -> b
org.libsdl.app.SDLGenericMotionListener_API24 -> org.libsdl.app.f:
    boolean mRelativeModeEnabled -> a
    1:1:float getEventX(android.view.MotionEvent):0:0 -> a
    2:2:boolean inRelativeMode():0:0 -> a
    float getEventY(android.view.MotionEvent) -> b
org.libsdl.app.SDLGenericMotionListener_API26 -> org.libsdl.app.g:
    boolean mRelativeModeEnabled -> b
    1:1:float getEventX(android.view.MotionEvent):0:0 -> a
    2:2:boolean inRelativeMode():0:0 -> a
    1:1:float getEventY(android.view.MotionEvent):0:0 -> b
    2:2:void reclaimRelativeMouseModeIfNeeded():0:0 -> b
org.libsdl.app.SDLHapticHandler -> org.libsdl.app.h:
    java.util.ArrayList mHaptics -> a
org.libsdl.app.SDLHapticHandler_API26 -> org.libsdl.app.i:
org.libsdl.app.SDLJoystickHandler -> org.libsdl.app.j:
    boolean handleMotionEvent(android.view.MotionEvent) -> a
org.libsdl.app.SDLJoystickHandler_API16 -> org.libsdl.app.k:
    java.util.ArrayList mJoysticks -> a
    1:1:org.libsdl.app.SDLJoystickHandler_API16$SDLJoystick getJoystick(int):0:0 -> a
    2:2:boolean handleMotionEvent(android.view.MotionEvent):0:0 -> a
org.libsdl.app.SDLJoystickHandler_API16$$ExternalSyntheticThrowCCEIfNotNull0 -> a.b:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    void org.libsdl.app.SDLJoystickHandler_API16$$InternalSyntheticThrowCCEIfNotNull$2$3b893f297dd02c307c5a782db0462fd4da43cdc26ca1d95819946b239da7562c$0.m(java.lang.Object) -> a
      # {"id":"com.android.tools.r8.synthesized"}
org.libsdl.app.SDLJoystickHandler_API16$SDLJoystick -> org.libsdl.app.k$a:
org.libsdl.app.SDLJoystickHandler_API19 -> org.libsdl.app.l:
org.libsdl.app.SDLMain -> org.libsdl.app.m:
org.libsdl.app.SDLSurface -> org.libsdl.app.n:
    android.hardware.SensorManager mSensorManager -> a
    android.view.Display mDisplay -> b
    float mHeight -> d
    boolean mIsSurfaceReady -> e
    float mWidth -> c
    1:1:void enableSensor(int,boolean):0:0 -> a
    2:2:void handlePause():0:0 -> a
    void handleResume() -> b
org.love2d.android.GameActivity -> org.love2d.android.GameActivity:
    int[] externalStorageRequestDummy -> v
    int[] recordAudioRequestDummy -> w
    java.lang.String gamePath -> F
    boolean needToCopyGameInArchive -> I
    android.os.Vibrator vibrator -> G
    boolean $assertionsDisabled -> J
    android.util.DisplayMetrics metrics -> E
    int safeAreaRight -> D
    boolean storagePermissionUnnecessary -> x
    int safeAreaLeft -> B
    int safeAreaBottom -> C
    int safeAreaTop -> A
    boolean shortEdgesMode -> y
    boolean embed -> z
    boolean immersiveActive -> H
    1:1:java.util.HashMap buildFileTree(android.content.res.AssetManager,java.lang.String,java.util.HashMap):0:0 -> a
    2:2:boolean copyAssetFile(java.io.InputStream,java.lang.String):0:0 -> a
    3:3:void handleIntent(android.content.Intent):0:0 -> a
    java.lang.String[] getLibraries() -> f
    java.lang.String getMainSharedObject() -> h
    org.libsdl.app.SDLActivity access$000() -> r
    void checkLovegameFolder() -> s
    void copyGameInsideArchive() -> t
    int getAudioFreq() -> u
    int getAudioSMP() -> v
    boolean isNativeLibsExtracted() -> w
    void showExternalStoragePermissionMissingDialog() -> x
org.love2d.android.GameActivity$1 -> org.love2d.android.GameActivity$a:
    org.love2d.android.GameActivity this$0 -> a
org.love2d.android.GameActivity$2 -> org.love2d.android.GameActivity$b:
    org.love2d.android.GameActivity this$0 -> a
org.love2d.android.GameActivity$2$1 -> org.love2d.android.GameActivity$b$a:
    org.love2d.android.GameActivity$2 this$1 -> a
